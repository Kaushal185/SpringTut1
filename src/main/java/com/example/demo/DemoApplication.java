package com.example.demo;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
		Doctor d = context.getBean(Doctor.class);
		d.assist();

		Engineer e = context.getBean(Engineer.class);
		e.assist();

		Science se  = context.getBean(Engineer.class);
		Science sd = context.getBean(Doctor.class);

		se.assist();
		sd.assist();
		// If we do not define property in bean then it can't been accessible if object is created using getBean method.
		// if object is created using normal new keyword then everything inside class is accessible as of oop rules.

		//Here se and sd not access qualification variable because parent not access child variables.
		// let's create new variable for this

		Doctor avasti = context.getBean(Doctor.class);
		System.out.println(avasti.getQualification());

		Engineer pande = context.getBean(Engineer.class);
		System.out.println(pande.getQualification());

		//If you define property in bean then we must have to defie getters and setters insdie our class if not then we have to pay for it.
		// not pay it just cause error.

		//

		Student std = context.getBean(Student.class);
		//always remember that to create getters and setters of property defined inside bean.(variables we are getting from bean)
		System.out.println(std.getEng());//eng and doc are private variables so we can't access them directly
		System.out.println(std.getDoc());

		System.out.println(d.equals(std.getDoc()));
		System.out.println(d == std.getDoc());
		System.out.println("Is that all the oject generated by spring context are same "+(sd == d && sd ==std.getDoc())+" "
		+(d.equals(std.getDoc()) && sd.equals(std.getDoc())));

		//This is example of constructor injection in which we insert value of variable directly using constructor
		// we are not using here setters and getters
		// in bean we have to define constructor-arg tag instead of property

		Lawyer jolly = context.getBean(Lawyer.class);
		System.out.println(jolly.qualification);




	}

}
